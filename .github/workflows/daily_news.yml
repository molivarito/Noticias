name: Generar Resumen de Noticias

on:
  schedule:
    # Ejecuta todos los días a las 07:00 UTC (ajusta la hora según tu preferencia)
    # Puedes usar https://crontab.guru/ para generar expresiones cron
    - cron: '0 7 * * *' # Reporte diario
    # Descomenta y ajusta si quieres un reporte semanal en un día específico, ej. Domingos a las 08:00 UTC
    # - cron: '0 8 * * 0' # Reporte semanal los Domingos
  workflow_dispatch: # Permite ejecutarlo manualmente desde la pestaña "Actions" en GitHub

jobs:
  generate_daily_report:
    name: Reporte Diario de Noticias
    runs-on: ubuntu-latest
    steps:
    - name: Checkout del repositorio
      uses: actions/checkout@v4

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10' # Asegúrate que coincida con la versión con la que desarrollaste

    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Ejecutar script de noticias (Diario)
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        GMAIL_USER: ${{ secrets.GMAIL_USER }} # Asegúrate de tener este secret
        GMAIL_DESTINATARIO: ${{ secrets.GMAIL_DESTINATARIO || secrets.GMAIL_USER }} # Opcional, usa GMAIL_USER si no está
        # Para el script de Python, si quieres que el email contenga la URL de GitHub Pages:
        BASE_WEB_URL: "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }} # Para que el script de Python pueda construir la URL
        GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }} # Para que el script de Python pueda construir la URL
        # El script compila_noticias.py por defecto es diario si no se pasa --weekly
      run: python compila_noticias.py # Asume que tu script está en la raíz del repo

    - name: Deploy to GitHub Pages
      if: success()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }} # Token automático de GitHub Actions
        publish_dir: ./ # Directorio que contiene el HTML a publicar (asume que resumen_noticias.html está en la raíz)
        publish_branch: gh-pages # Rama donde se publicará
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy daily news summary to GitHub Pages'
        # Opcional: si solo quieres el último resumen y no acumular historial en gh-pages
        force_orphan: true

  # Descomenta y adapta este job si quieres un reporte semanal separado
  # generate_weekly_report:
  #   name: Reporte Semanal de Noticias
  #   if: github.event_name == 'schedule' && github.event.schedule == '0 8 * * 0' # Asegúrate que el cron coincida
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout del repositorio
  #     uses: actions/checkout@v4

  #   - name: Configurar Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.10'

  #   - name: Instalar dependencias
  #     run: |
  #       python -m pip install --upgrade pip
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  #   - name: Ejecutar script de noticias (Semanal)
  #     env:
  #       GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  #       GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
  #       GMAIL_USER: ${{ secrets.GMAIL_USER }}
  #       GMAIL_DESTINATARIO: ${{ secrets.GMAIL_DESTINATARIO || secrets.GMAIL_USER }}
  #       BASE_WEB_URL: "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
  #       GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
  #       GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
  #       # Para el reporte semanal, podrías querer un nombre de archivo diferente
  #       # OUTPUT_HTML_FILE_NAME: "resumen_semanal_noticias.html" # Si tu script lo maneja
  #     run: python compila_noticias.py --weekly # Pasa el argumento --weekly

  #   - name: Deploy Weekly Report to GitHub Pages
  #     if: success()
  #     uses: peaceiris/actions-gh-pages@v3
  #     with:
  #       github_token: ${{ secrets.GITHUB_TOKEN }}
  #       publish_dir: ./ # Asume que el script genera el archivo con el nombre correcto
  #       # Si el script genera resumen_noticias.html, y quieres un nombre diferente para el semanal:
  #       # target_path: resumen_semanal_noticias.html # Publica el archivo con este nombre en la raíz de gh-pages
  #       # O si tu script genera un archivo con nombre diferente para el semanal:
  #       # publish_dir: ./ # y asegúrate que el nombre del archivo sea el que quieres
  #       publish_branch: gh-pages
  #       user_name: 'github-actions[bot]'
  #       user_email: 'github-actions[bot]@users.noreply.github.com'
  #       commit_message: 'Deploy weekly news summary to GitHub Pages'
  #       # Considera si quieres `force_orphan: true` también aquí o `keep_files: true`
  #       # si quieres mantener tanto el diario como el semanal en la misma rama.
  #       # Si quieres archivos separados, asegúrate que tu script Python genere
  #       # nombres de archivo diferentes o renómbralos antes de este paso.
