name: Generar Resumen de Noticias

on:
  schedule:
    - cron: '0 7 * * *'  # Reporte diario
    - cron: '0 8 * * 0'  # Reporte semanal los Domingos
  
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Tipo de reporte a generar manualmente'
        required: true
        default: 'diario'
        type: choice
        options:
        - diario
        - semanal

jobs:
  generate_and_deploy_reports:
    name: Generar y Desplegar Reportes
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
      GMAIL_USER: ${{ secrets.GMAIL_USER }}
      GMAIL_DESTINATARIO: ${{ secrets.GMAIL_DESTINATARIO || secrets.GMAIL_USER }}
      BASE_WEB_URL: "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
      GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
    steps:
    - name: Checkout del repositorio
      uses: actions/checkout@v4

    - name: Preparar directorio de publicación y restaurar estado anterior
      run: |
        mkdir -p public
        # Clonamos la rama gh-pages para obtener el estado actual del sitio
        git clone --depth=1 --branch=gh-pages "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" .gh-pages-temp
        # Copiamos el contenido existente (si lo hay) a la carpeta public. Esto preserva los archivos que no se regeneran en esta ejecución.
        cp -a .gh-pages-temp/. public/ 2>/dev/null || true
        rm -rf .gh-pages-temp
        # Copiamos el historial restaurado al directorio raíz para que el script lo pueda leer y actualizar
        if [ -f public/historial_noticias.json ]; then cp public/historial_noticias.json .; fi
        
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Ejecutar Reporte Diario
      if: (github.event_name == 'schedule' && github.event.schedule == '0 7 * * *') || (github.event_name == 'workflow_dispatch' && github.event.inputs.report_type == 'diario')
      run: |
        echo "Ejecutando reporte diario..."
        python compila_noticias.py

    - name: Ejecutar Reporte Semanal
      if: (github.event_name == 'schedule' && github.event.schedule == '0 8 * * 0') || (github.event_name == 'workflow_dispatch' && github.event.inputs.report_type == 'semanal')
      run: |
        echo "Ejecutando reporte semanal..."
        python compila_noticias.py --weekly

    - name: Mover artefactos generados al directorio de publicación
      if: success()
      run: |
        # Mover cada archivo individualmente para evitar errores si uno no existe, sobrescribiendo el antiguo en public/
        if [ -f index.html ]; then mv index.html public/; fi
        if [ -f semanal.html ]; then mv semanal.html public/; fi
        if [ -f historial_noticias.json ]; then mv historial_noticias.json public/; fi
        
    - name: Desplegar reportes a GitHub Pages
      if: success()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        publish_branch: gh-pages
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy news summary to GitHub Pages'
        # La opción keep_files ya no es necesaria, ya que 'public' contiene el estado completo del sitio.
        # Al eliminarla, se realiza un despliegue limpio del contenido de 'public'.
        # keep_files: true